typedef struct node{
   int data;
   struct node *link;
}NODE;
NODE **create_hash(int n);
void hash_insert(NODE **ht, int n,int x);
void hash_search(NODE **ht, int n,int x);
void hash_delete(NODE **ht, int n);

#include<stdio.h>
#include<stdlib.h>
#include"Hash.h"
NODE **create_hash(int n){
    NODE **ht;
    ht=(NODE**)calloc(sizeof(NODE*),n);
    return ht;      
}
void hash_insert(NODE **ht,int n,int x){
     int r=x%n;
     NODE *T=(NODE*)malloc(sizeof(NODE));
     T->data=x;
     T->link= NULL;
     if(ht[r]==NULL) ht[r]=T;
     else{    
     T->link=ht[r];
     ht[r]=T;
     }
}
void hash_search(NODE **ht,int n,int x){
         int r=x%n;
         NODE *temp=ht[r];
         int p=1;
         while(temp!=NULL){
            if(temp->data==x){
                printf("%d is present in %d location and position is %d\n",x,r,p);
                return;
            }
            temp=temp->link;
            p++;
         }
         printf("Element %d is not found ",x);
}
void hash_delete(NODE **ht,int n){
         NODE *T;
         for(int i=0;i<n;i++){
             NODE *temp=ht[i];
             while(temp!=NULL){
                T=temp;
                temp=temp->link;
                free(T);
             }    
         }
}


#include<stdio.h>
#include"Hash.h"
int main(){
  NODE **ht;
  int n,x,m;
  printf("enter the number of rows in hash table:");
  scanf("%d",&n);
  ht=create_hash(n);
  do{
    printf("1-insert\n2-search\n3-exit\n");
    scanf("%d",&m);
    switch(m){
      case 1:
            printf("enter the element to insert:");
            scanf("%d",&x);
            hash_insert(ht,n,x);
            break;
      case 2:
            printf("enter the element to search:");
            scanf("%d",&x);
            hash_search(ht,n,x);
            break;
     default:
            if(m>3){printf("wrong input\n");}
            break;
     }
   }while(m!=3);
   hash_delete(ht,n);
   return 0;
}
